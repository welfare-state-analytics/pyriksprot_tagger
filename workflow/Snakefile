# type: ignore
# pylint: skip-file, disable-all

import glob
import os
import sys
from os.path import abspath, dirname, join as jj, normpath as nj, realpath

from snakemake import shell
from snakemake.io import expand, glob_wildcards

from .utility import setup_logging

setup_logging()

WORKFLOW_PATH = dirname(realpath(workflow.snakefile))
PACKAGE_PATH = abspath(jj(WORKFLOW_PATH, ".."))

if PACKAGE_PATH not in sys.path:
    sys.path.insert(0, PACKAGE_PATH)

from workflow.config import Config, resolve_config
from workflow.model.utility import path_add_date, sync_delta_names

shell.prefix("set -o pipefail; ")

config: Config = resolve_config(config)

DEBUG_PRINT: bool = config.get("debug_print", "").lower() == "true"

SOURCE_FOLDER = config.parla_clarin.folder
SOURCE_EXTENSION = "xml"

TARGET_FOLDER = config.annotated_folder
TARGET_EXTENSION = "zip"

LOG_NAME = path_add_date(jj(config.work_folders.log_folder, "parla_clarin.log"))

SOURCE_YEARS, TARGET_BASENAMES = glob_wildcards(jj(SOURCE_FOLDER, "{year}", f"{{file}}.{SOURCE_EXTENSION}"))

TARGET_FILES = expand(
    jj(TARGET_FOLDER, "{year}", f"{{basename}}.{TARGET_EXTENSION}"), zip, year=SOURCE_YEARS, basename=TARGET_BASENAMES
)

SOURCE_FILES = glob.glob(jj(config.parla_clarin.folder, "*", "*.xml"))

if DEBUG_PRINT:
    print(f"CONFIG NAME: {config_filename}")
    print(f"   SOURCE_FOLDER: {SOURCE_FOLDER}")
    print(f"    SOURCE_FILES: {SOURCE_FILES[:10]}...")
    print(f"    SOURCE_YEARS: {SOURCE_YEARS}")
    print(f"   TARGET_FOLDER: {TARGET_FOLDER}")
    print(f"TARGET_EXTENSION: {TARGET_EXTENSION}")
    print(f"TARGET_BASENAMES: {TARGET_BASENAMES}")
    print(f"    TARGET_FILES: {TARGET_FILES[:10]}...")


rule all:
    # log:
    #     LOG_NAME,
    input:
        TARGET_FILES,


include: jj("rules", "help.smk")
include: jj("rules", "update_repository.smk")
# include: jj("rules", "extract_speeches.smk")
include: jj("rules", "compute_frequency.smk")
include: jj("rules", "annotate_speeches.smk")


onstart:
    print("Workflow started")
    os.makedirs(TARGET_FOLDER, exist_ok=True)
    os.makedirs(config.work_folders.data_folder, exist_ok=True)
    os.makedirs(config.work_folders.log_folder, exist_ok=True)
    # os.makedirs(config.extract_speeches.folder, exist_ok=True)
    os.makedirs(config.annotated_folder, exist_ok=True)


onsuccess:
    sync_delta_names(SOURCE_FOLDER, "xml", TARGET_FOLDER, "xml", delete=True)
    print("Workflow ended")


onerror:
    print("Workflow FAILED")

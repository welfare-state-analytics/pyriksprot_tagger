# type: ignore
# pylint: skip-file, disable-all
import os
from os.path import join as jj
import sys
from workflow.config.typed_config import Config, load_typed_config

from snakemake import shell
from snakemake.io import expand, glob_wildcards
from snakemake.logging import logger

WORKFLOW_PATH = os.path.dirname(os.path.realpath(workflow.snakefile))
PACKAGE_PATH = os.path.abspath(jj(WORKFLOW_PATH, ".."))

if PACKAGE_PATH not in sys.path:
    sys.path.insert(0, PACKAGE_PATH)

from workflow.model.utility import dict_get_by_path as gd

# options: https://snakemake.readthedocs.io/en/stable/executing/cli.html#all-options
shell.prefix("set -o pipefail; ")

# configfile: jj(WORKFLOW_PATH, 'config', 'config.yml')
config: Config = load_typed_config('config.yml')

source_folder = config.parla_clarin.folder # gd(config, 'parla_clarin.folder')
target_folder = config.extract_speeches.folder # gd(config, 'extract_speeches.folder')
target_extension = config.extract_speeches.extension # gd(config, 'extract_speeches.extension')
work_folder = config.work_folders.data_folder # gd(config, 'word_frequency.work_folders.data_folder')

MANDATORY_FOLDERS = [target_folder]

onstart:
    print("Starting Workflow")


rule all:
    input:
        # MANDATORY_FOLDERS,
        # config.word_frequency.file_path,
        expand(
            f'{target_folder}/{{basename}}.{target_extension}',
            basename=glob_wildcards(f"{source_folder}/{{basename}}.xml").basename,
        ),


rule dirs:
    output: MANDATORY_FOLDERS,
    shell:
        "mkdir -p " + ' '.join(MANDATORY_FOLDERS)


include: './rules/help.smk'
include: './rules/update_repository.smk'
include: './rules/extract_speeches.smk'
include: './rules/compute_frequency.smk'
include: './rules/annotate_speeches.smk'


onsuccess:
    #if "verbose" in config and config["verbose"]:
    print("\n--- Preprocessing workflow finished successfully! ------------------------------------\n")


onerror:
    print("Workflow ended with error status!")

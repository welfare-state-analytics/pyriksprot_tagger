# type: ignore
# pylint: skip-file, disable-all
import os
from os.path import join as jj
import sys
from workflow.config.typed_config import Config, load_typed_config

from snakemake import shell
from snakemake.io import expand, glob_wildcards
from snakemake.logging import logger

WORKFLOW_PATH = os.path.dirname(os.path.realpath(workflow.snakefile))
PACKAGE_PATH = os.path.abspath(jj(WORKFLOW_PATH, ".."))

# if PACKAGE_PATH not in sys.path:
#     sys.path.insert(0, PACKAGE_PATH)

from workflow.model.utility import dict_get_by_path as gd

shell.prefix("set -o pipefail; ")

# configfile: jj(WORKFLOW_PATH, 'config', 'config.yml')

config_filename: str = (config or {}).get('config_filename', 'config.yml')

config: Config = load_typed_config(config_filename)

SOURCE_FOLDER = config.parla_clarin.folder
TARGET_FOLDER = config.extract_speeches.folder
TARGET_EXTENSION = config.extract_speeches.extension

onstart:
    print("Workflow started")
    os.makedirs(TARGET_FOLDER, exist_ok=True)

years, basenames = glob_wildcards(os.path.join(SOURCE_FOLDER, f"{{year}}/{{file}}.{TARGET_EXTENSION}"))

TARGET_FILES = expand(f'{TARGET_FOLDER}/{{year}}/{{basename}}.{TARGET_EXTENSION}', zip, year=years, basename=basenames)

rule all:
    input:
        # config.word_frequency.file_path,
        TARGET_FILES

include: './rules/help.smk'
include: './rules/update_repository.smk'
include: './rules/extract_speeches.smk'
include: './rules/compute_frequency.smk'
include: './rules/annotate_speeches.smk'


onsuccess:
    utility.sync_delta_names(
        SOURCE_FOLDER, "xml", TARGET_FOLDER, "txt", delete=True
    )
    print("Workflow ended")

onerror:
    print("Workflow FAILED")

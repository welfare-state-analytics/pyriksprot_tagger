[tool.poetry]
name = "westac_parlaclarin_pipeline"
version = "2021.3.1"
description = "Pipeline that transforms Parla-Clarin XML files"
authors = ["Roger MÃ¤hler <roger.mahler@hotmail.com>"]
packages = [
    { include = "workflow" },
    { include="scripts" },
    { include="resources" },
    { include="makeline" },
]
classifiers = [
    'License :: OSI Approved :: Apache Software License',
    'Operating System :: OS Independent',
    'Topic :: Software Development',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.8',
]
license = "Apache-2.0"
readme = "README.md"
homepage = "https://westac.se"
repository = "https://github.com/welfare-state-analytics/westac_parlaclarin_pipeline"

[tool.poetry.dependencies]
python = "==3.8.5"
xmltodict = "^0.12.0"
untangle = "^1.1.1"
Jinja2 = "^2.11.3"
click = "^7.1.2"
snakefmt = "^0.3.1"
snakemake = "^6.0.2"

[tool.poetry.dev-dependencies]
black = "^20.8b1"
coverage = "^5.4"
dephell = "^0.8.3"
flake8 = "^3.8.4"
flake8-black = "^0.2.1"
isort = "^5.7.0"
mypy = "^0.812"
pre-commit = "^2.10.1"
pycodestyle = "^2.6.0"
pyflakes = "^2.2.0"
pylint = "^2.7.1"
pytest = "^6.2.2"
pytest-cov = "^2.11.1"
rope = "^0.18.0"

[tool.poetry.scripts]
parla_transform = "scripts.parla_transform:main"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [ "-ra", "-q" ]
log_cli = "False"
testpaths = [ "tests" ]
python_files = "*_test.py"
python_functions = "test_*"
filterwarnings = [ "ignore::_pytest.warning_types.PytestCollectionWarning" ]

[tool.snakefmt]
line_length = 120
include = '\.smk$|^Snakefile|\.py$'

[tool.black]
skip_string_normalization = true
line-length = 120
target-version = ["py38"]
skip-string-normalization = true
exclude = '''
(
  \.git
  | \.pypy_cache
  | \.pytest_cache
  | \.mypy_cache
  | deprecated
)
'''

[tool.isort]
profile = "black"
line_length = 120
py_version = "auto"
float_to_top = true
src_paths = [ "penelope", "tests" ]

[tool.coverage.run]
source = ["penelope"]
branch = true
omit = [ "**/__init__.py", "tests/*" ]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError"
]
show_missing = true
sort = "Name"

[tool.dephell.main]
from = {format = "poetry", path = "pyproject.toml"}
to = {format = "poetry", path = "pyproject.toml"}

[build-system]
requires = ["setuptools", "poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
